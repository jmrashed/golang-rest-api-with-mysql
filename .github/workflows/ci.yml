name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  # -------------------------------
  # 1Ô∏è‚É£ TEST JOB
  # -------------------------------
  test:
    runs-on: ubuntu-latest
    
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: password
          MYSQL_DATABASE: goblog_test
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping -h localhost"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5

    steps:
    # -----------------
    # Step 1: Checkout code
    # -----------------
    - name: Checkout repository
      uses: actions/checkout@v4

    # -----------------
    # Step 2: Setup Go
    # -----------------
    - name: Setup Go environment
      uses: actions/setup-go@v5
      with:
        go-version: '1.23' # Use the latest stable version

    # -----------------
    # Step 3: Cache dependencies
    # -----------------
    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    # -----------------
    # Step 4: Install dependencies
    # -----------------
    - name: Install dependencies
      run: go mod tidy

    # -----------------
    # Step 5: Wait for MySQL service
    # -----------------
    - name: Wait for MySQL
      run: |
        echo "Waiting for MySQL to be ready..."
        for i in {1..30}; do
          if mysqladmin ping -h"127.0.0.1" -P3306 -uroot -ppassword --silent; then
            echo "MySQL is ready!"
            break
          fi
          echo "Waiting for MySQL ($i)..."
          sleep 2
        done

    # -----------------
    # Step 6: Run tests with coverage
    # -----------------
    - name: Run tests
      env:
        DB_HOST: 127.0.0.1
        DB_PORT: 3306
        DB_USER: root
        DB_PASSWORD: password
        DB_NAME: goblog_test
        JWT_SECRET: test-jwt-secret
        REFRESH_SECRET: test-refresh-secret
      run: |
        go test -v -race -coverprofile=coverage.out ./...
        go tool cover -func=coverage.out

    # -----------------
    # Step 7: Upload coverage report to Codecov (optional)
    # -----------------
    - name: Upload coverage reports
      if: always()
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage.out
        token: ${{ secrets.CODECOV_TOKEN }}
        fail_ci_if_error: false

  # -------------------------------
  # 2Ô∏è‚É£ BUILD JOB
  # -------------------------------
  build:
    needs: test
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Setup Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.23'

    - name: Build application binary
      run: |
        mkdir -p build
        CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build -o build/main .

    - name: Build Docker image
      run: |
        docker build -t golang-rest-api:${{ github.sha }} .

  # -------------------------------
  # 3Ô∏è‚É£ DEPLOY JOB (placeholder)
  # -------------------------------
  deploy:
    needs: [test, build]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
    - uses: actions/checkout@v4

    - name: Deploy to staging
      run: |
        echo "‚úÖ Build and tests passed."
        echo "üöÄ Deployment step is currently disabled (CI only)."
