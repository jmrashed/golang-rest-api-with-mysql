openapi: 3.0.3
info:
  title: Go REST API with Authentication & Authorization
  description: A comprehensive REST API with JWT authentication, RBAC, and CRUD operations
  version: 1.0.0
  contact:
    name: API Support
    email: support@example.com
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT

servers:
  - url: http://localhost:8082/api/v1
    description: Development server

security:
  - BearerAuth: []

paths:
  /register:
    post:
      tags:
        - Authentication
      summary: Register a new user
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterRequest'
      responses:
        '201':
          description: User registered successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /login:
    post:
      tags:
        - Authentication
      summary: Login user
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '401':
          description: Invalid credentials
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /profile:
    get:
      tags:
        - User Profile
      summary: Get user profile
      responses:
        '200':
          description: Profile retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'

  /todos:
    get:
      tags:
        - Todos
      summary: Get user todos with pagination
      parameters:
        - name: page
          in: query
          schema:
            type: integer
            minimum: 1
            default: 1
        - name: limit
          in: query
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 10
      responses:
        '200':
          description: Todos retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedTodoResponse'

    post:
      tags:
        - Todos
      summary: Create a new todo
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateTodoRequest'
      responses:
        '201':
          description: Todo created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TodoResponse'

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    RegisterRequest:
      type: object
      required:
        - username
        - email
        - password
      properties:
        username:
          type: string
          minLength: 3
          maxLength: 50
        email:
          type: string
          format: email
        password:
          type: string
          minLength: 6

    LoginRequest:
      type: object
      required:
        - username
        - password
      properties:
        username:
          type: string
        password:
          type: string

    CreateTodoRequest:
      type: object
      required:
        - title
      properties:
        title:
          type: string
          minLength: 1
          maxLength: 200
        content:
          type: string
          maxLength: 1000

    User:
      type: object
      properties:
        id:
          type: integer
        username:
          type: string
        email:
          type: string
        is_active:
          type: boolean
        created_at:
          type: string
          format: date-time

    Todo:
      type: object
      properties:
        id:
          type: integer
        user_id:
          type: integer
        title:
          type: string
        content:
          type: string
        completed:
          type: boolean
        created_at:
          type: string
          format: date-time

    AuthResponse:
      type: object
      properties:
        message:
          type: string
        data:
          type: object
          properties:
            user:
              $ref: '#/components/schemas/User'
            access_token:
              type: string
            refresh_token:
              type: string
            expires_in:
              type: integer

    TodoResponse:
      type: object
      properties:
        message:
          type: string
        data:
          $ref: '#/components/schemas/Todo'

    PaginatedTodoResponse:
      type: object
      properties:
        message:
          type: string
        data:
          type: object
          properties:
            data:
              type: array
              items:
                $ref: '#/components/schemas/Todo'

    ErrorResponse:
      type: object
      properties:
        error:
          type: string
        message:
          type: string